how many times the song was used in other sets of yours

redirects

Redirect
  nonce
  nonce_url
  default_url
  nonced

@remote_video = RemoteVideo.find_by_id(params[:remote_video_id])
@remote_artist = RemoteArtist.find_by_name(params[:remote_artist_name])
@remote_videos = RemoteVideo.search(params[:artist_or_song], params[:limit], params[:offset])

Episode
  image_url

Video
  remote_video_id
  remote_video_image_url
  remote_video_title
  remote_video_artist_names
  remote_video_duration

:remote_video_id => video.id,
:remote_video_title => video.title,
:remote_video_duration => video.duration,
:remote_video => video

RemoteArtist
  name
  releases
  website
  categories
  <ul>
    <% @recent_episodes.each { |episode| %>
    <% raise episode.inspect if episode.videos.empty? %>
      <li>
        <table>
          <tr>
            <td>
              <%=link_to(image_tag(episode.videos.first.yahoo_video.images.first.url, {:width => 120}), episode_url(*episode.to_param))%>
            </td>
            <td>
              <ul>
                <li>
                  Set: <%=link_to(episode.title, episode_url(*episode.to_param))%>
                </li>
                <li>
                  VeeJay: <%=link_to(episode.person.nickname, profile_url(episode.person))%>
                </li>
              </ul>
            </td>
          </tr>
        </table>
      </li>
    <% } %>
    <li>
      <%=will_paginate(@recent_episodes)%>
    </li>
  </ul>
              #RemoteVideo.new(attributes[:remote_id], attributes[:title], attributes[:duration], ActiveSupport::JSON.decode(attributes[:artist_names]), attributes[:image_url])
