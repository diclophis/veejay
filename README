how many times the song was used in other sets of yours

redirects

Redirect
  nonce
  nonce_url
  default_url
  nonced

@remote_video = RemoteVideo.find_by_id(params[:remote_video_id])
@remote_artist = RemoteArtist.find_by_name(params[:remote_artist_name])
@remote_videos = RemoteVideo.search(params[:artist_or_song], params[:limit], params[:offset])

Episode
  image_url

Video
  remote_video_id
  remote_video_image_url
  remote_video_title
  remote_video_artist_names
  remote_video_duration

:remote_video_id => video.id,
:remote_video_title => video.title,
:remote_video_duration => video.duration,
:remote_video => video

RemoteArtist
  name
  releases
  website
  categories
  <ul>
    <% @recent_episodes.each { |episode| %>
    <% raise episode.inspect if episode.videos.empty? %>
      <li>
        <table>
          <tr>
            <td>
              <%=link_to(image_tag(episode.videos.first.yahoo_video.images.first.url, {:width => 120}), episode_url(*episode.to_param))%>
            </td>
            <td>
              <ul>
                <li>
                  Set: <%=link_to(episode.title, episode_url(*episode.to_param))%>
                </li>
                <li>
                  VeeJay: <%=link_to(episode.person.nickname, profile_url(episode.person))%>
                </li>
              </ul>
            </td>
          </tr>
        </table>
      </li>
    <% } %>
    <li>
      <%=will_paginate(@recent_episodes)%>
    </li>
  </ul>
              #RemoteVideo.new(attributes[:remote_id], attributes[:title], attributes[:duration], ActiveSupport::JSON.decode(attributes[:artist_names]), attributes[:image_url])

@rating_value = RatingValue['poor']
@poor_rating = create_rating(:value => @rating_value)
@second_poor_rating = create_rating(:value => @rating_value)

      exists  app/models/
      exists  app/controllers/
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/messions
      create  app/views/muser_mailer
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/musers
      exists  config/initializers
      create  test/functional/
      exists  test/functional/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/muser.rb
      create  app/models/muser_mailer.rb
      create  app/models/muser_observer.rb
      create  app/controllers/messions_controller.rb
      create  app/controllers/musers_controller.rb
      create  lib/authenticated_system.rb
      create  lib/authenticated_test_helper.rb
      create  config/initializers/site_keys.rb
      create  test/functional/messions_controller_test.rb
      create  test/functional/musers_controller_test.rb
      create  test/unit/muser_test.rb
      create  test/unit/muser_mailer_test.rb
      create  test/fixtures/musers.yml
      create  app/helpers/messions_helper.rb
      create  app/helpers/musers_helper.rb
      create  app/views/messions/new.html.erb
      create  app/views/musers/new.html.erb
      create  app/views/musers/_muser_bar.html.erb
      create  app/views/muser_mailer/activation.erb
      create  app/views/muser_mailer/signup_notification.erb
      exists  db/migrate
      create  db/migrate/20081207211816_create_musers.rb


Once finished, don't forget to:

- Add an observer to config/environment.rb
config.active_record.observers = :muser_observer
- Add routes to these resources. In config/routes.rb, insert routes like:
map.signup '/signup', :controller => 'musers', :action => 'new'
map.login  '/login',  :controller => 'messions', :action => 'new'
map.logout '/logout', :controller => 'messions', :action => 'destroy'
map.activate '/activate/:activation_code', :controller => 'musers', :action => 'activate', :activation_code => nil

public set sharing function
